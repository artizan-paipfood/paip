import 'package:flutter/foundation.dart';
import 'package:core/core.dart';
import 'package:paipfood_package/paipfood_package.dart';
import 'package:app/src/core/notifiers/delivery_area_notifier.dart';

class DeliveryTaxDebug {
  static void logDeliveryState({
    required DeliveryAreaNotifier deliveryAreaNotifier,
    required OrderTypeEnum orderType,
    AddressEntity? userAddress,
    AddressEntity? establishmentAddress,
    String? context,
  }) {
    if (!kDebugMode) return;

    print('üêõ DELIVERY TAX DEBUG ${context != null ? "($context)" : ""}:');
    print('   üìç Order Type: ${orderType.name}');
    print('   üë§ User Address: ${userAddress?.id ?? "null"} (${userAddress?.formattedAddress(LocaleNotifier.instance.locale) ?? "n√£o encontrado"})');
    print('   üè™ Establishment Address: ${establishmentAddress?.id ?? "null"}');
    print('   üí∞ Delivery Tax: ${deliveryAreaNotifier.deliveryTax?.price ?? "null"}');
    print('   üöö Delivery Method: ${deliveryAreaNotifier.deliveryMethod?.name ?? "null"}');
    print('   ‚ö° Auth User: ${AuthNotifier.instance.auth.user?.id ?? "null"}');
    print('   ‚ö° Auth User Address: ${AuthNotifier.instance.auth.user?.getAddress?.id ?? "null"}');

    if (deliveryAreaNotifier.deliveryTax != null) {
      final tax = deliveryAreaNotifier.deliveryTax!;
      print('   üìä Tax Details:');
      print('      - Price: R\$ ${tax.price}');
      print('      - Distance: ${tax.distance}m');
      print('      - Straight Distance: ${tax.straightDistance}m');
    }

    // Identifica poss√≠veis problemas
    final problems = <String>[];

    if (orderType.isDelivery && userAddress == null) {
      problems.add('Tipo de pedido √© entrega mas n√£o h√° endere√ßo do usu√°rio');
    }

    if (orderType.isDelivery && deliveryAreaNotifier.deliveryTax == null) {
      problems.add('Tipo de pedido √© entrega mas taxa n√£o foi carregada');
    }

    if (orderType.isDelivery && deliveryAreaNotifier.deliveryMethod == null) {
      problems.add('Tipo de pedido √© entrega mas m√©todo de entrega n√£o definido');
    }

    if (AuthNotifier.instance.auth.user == null) {
      problems.add('Usu√°rio n√£o est√° autenticado');
    }

    if (AuthNotifier.instance.auth.user?.getAddress == null && orderType.isDelivery) {
      problems.add('Usu√°rio autenticado mas sem endere√ßo principal');
    }

    // NOVOS CHECKS DE SEGURAN√áA
    if (orderType.isDelivery && deliveryAreaNotifier.deliveryTax?.price == 0) {
      problems.add('‚ö†Ô∏è CR√çTICO: Taxa de entrega √© R\$ 0,00 para pedido delivery');
    }

    if (orderType.isDelivery && deliveryAreaNotifier.deliveryTax != null && deliveryAreaNotifier.deliveryTax!.price < 0) {
      problems.add('‚ùå ERRO: Taxa de entrega negativa detectada');
    }

    // Verifica√ß√£o de consist√™ncia de endere√ßos ser√° implementada futuramente

    if (problems.isNotEmpty) {
      print('   ‚ö†Ô∏è PROBLEMAS IDENTIFICADOS:');
      for (int i = 0; i < problems.length; i++) {
        print('      ${i + 1}. ${problems[i]}');
      }
    } else {
      print('   ‚úÖ Nenhum problema √≥bvio identificado');
    }

    print(''); // Linha em branco para separar logs
  }

  static void logOrderCalculation({
    required double subtotal,
    required double deliveryTax,
    required double discount,
    required double total,
    required OrderTypeEnum orderType,
  }) {
    if (!kDebugMode) return;

    print('üßÆ C√ÅLCULO DO PEDIDO:');
    print('   üíµ Subtotal: R\$ ${subtotal.toStringAsFixed(2)}');
    print('   üöö Taxa de Entrega: R\$ ${deliveryTax.toStringAsFixed(2)} (${orderType.name})');
    print('   üé´ Desconto: R\$ ${discount.toStringAsFixed(2)}');
    print('   üí∞ Total: R\$ ${total.toStringAsFixed(2)}');
    print('   üìù F√≥rmula: $subtotal + $deliveryTax - $discount = $total');

    if (orderType.isDelivery && deliveryTax == 0) {
      print('   ‚ö†Ô∏è ATEN√á√ÉO: Pedido √© entrega mas taxa √© R\$ 0,00');
    }

    print('');
  }
}
